generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Organization {
    id           String              @id @default(auto()) @map("_id") @db.ObjectId
    name         String
    primaryColor String?
    owners       OrganizationOwner[]
    Team         Team[]
}

model Team {
    id             String         @id @default(auto()) @map("_id") @db.ObjectId
    name           String
    organizationId String         @db.ObjectId
    organization   Organization   @relation(fields: [organizationId], references: [id])
    members        TeamMember[]
    Invitation     Invitation[]
    TeamSettings   TeamSettings[]
    AuditLog       AuditLog[]
}

model TeamMember {
    id              String  @id @default(auto()) @map("_id") @db.ObjectId
    teamId          String  @db.ObjectId
    userId          String  @db.ObjectId
    user            User    @relation(fields: [userId], references: [id])
    team            Team    @relation(fields: [teamId], references: [id])
    isAdmin         Boolean
    importanceLevel Int
    rank            Int
}

model TeamSettings {
    id                   String  @id @default(auto()) @map("_id") @db.ObjectId
    teamId               String  @db.ObjectId
    inviteByAdminOnly    Boolean @default(true) // Solo los admin pueden invitar
    invitationExpiration Int // Duración de la invitación en horas
    team                 Team    @relation(fields: [teamId], references: [id])
}

model AuditLog {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    teamId    String?  @db.ObjectId
    userId    String   @db.ObjectId
    action    String // Ejemplos: "joined", "left", "updated", "invited"
    timestamp DateTime @default(now())
    details   String? // Detalles adicionales sobre la acción
    team      Team?    @relation(fields: [teamId], references: [id])
    user      User     @relation(fields: [userId], references: [id])
}

model Notification {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId    String   @db.ObjectId
    message   String // Mensaje de la notificación
    read      Boolean  @default(false)
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id])
}

model User {
    id                 String              @id @default(auto()) @map("_id") @db.ObjectId
    name               String?
    email              String?             @unique
    image              String?
    accounts           Account[]
    sessions           Session[]
    ownedOrganizations OrganizationOwner[]
    memberships        TeamMember[]
    roleId             String?             @db.ObjectId
    role               Role?               @relation(fields: [roleId], references: [id])
    Invitation         Invitation[]
    AuditLog           AuditLog[]
    Notification       Notification[]
}

model OrganizationOwner {
    id             String       @id @default(auto()) @map("_id") @db.ObjectId
    organizationId String       @db.ObjectId
    userId         String       @db.ObjectId
    organization   Organization @relation(fields: [organizationId], references: [id])
    user           User         @relation(fields: [userId], references: [id])

    @@unique([organizationId, userId])
}

model Invitation {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    teamId     String   @db.ObjectId
    invitedBy  String   @db.ObjectId
    email      String // Email del usuario invitado
    validUntil DateTime // Hasta cuando es válida la invitación
    status     String // Ejemplos: "pending", "accepted", "declined"
    team       Team     @relation(fields: [teamId], references: [id])
    inviter    User     @relation(fields: [invitedBy], references: [id])
}

model Role {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String
    users       User[]
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
